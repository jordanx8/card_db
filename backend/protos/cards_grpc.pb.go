// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: cards.proto

package card_db

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	GetCards(ctx context.Context, in *Query, opts ...grpc.CallOption) (CardService_GetCardsClient, error)
	GetPlayers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CardService_GetPlayersClient, error)
	AddPlayer(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*Response, error)
	AddSeason(ctx context.Context, in *SeasonRequest, opts ...grpc.CallOption) (*Response, error)
	AddCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*Response, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) GetCards(ctx context.Context, in *Query, opts ...grpc.CallOption) (CardService_GetCardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[0], "/main.CardService/GetCards", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceGetCardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CardService_GetCardsClient interface {
	Recv() (*Card, error)
	grpc.ClientStream
}

type cardServiceGetCardsClient struct {
	grpc.ClientStream
}

func (x *cardServiceGetCardsClient) Recv() (*Card, error) {
	m := new(Card)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) GetPlayers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CardService_GetPlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[1], "/main.CardService/GetPlayers", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceGetPlayersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CardService_GetPlayersClient interface {
	Recv() (*Player, error)
	grpc.ClientStream
}

type cardServiceGetPlayersClient struct {
	grpc.ClientStream
}

func (x *cardServiceGetPlayersClient) Recv() (*Player, error) {
	m := new(Player)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) AddPlayer(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.CardService/AddPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddSeason(ctx context.Context, in *SeasonRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.CardService/AddSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCard(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.CardService/AddCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility
type CardServiceServer interface {
	GetCards(*Query, CardService_GetCardsServer) error
	GetPlayers(*Empty, CardService_GetPlayersServer) error
	AddPlayer(context.Context, *PlayerRequest) (*Response, error)
	AddSeason(context.Context, *SeasonRequest) (*Response, error)
	AddCard(context.Context, *CardRequest) (*Response, error)
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (UnimplementedCardServiceServer) GetCards(*Query, CardService_GetCardsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCards not implemented")
}
func (UnimplementedCardServiceServer) GetPlayers(*Empty, CardService_GetPlayersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}
func (UnimplementedCardServiceServer) AddPlayer(context.Context, *PlayerRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayer not implemented")
}
func (UnimplementedCardServiceServer) AddSeason(context.Context, *SeasonRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeason not implemented")
}
func (UnimplementedCardServiceServer) AddCard(context.Context, *CardRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_GetCards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardServiceServer).GetCards(m, &cardServiceGetCardsServer{stream})
}

type CardService_GetCardsServer interface {
	Send(*Card) error
	grpc.ServerStream
}

type cardServiceGetCardsServer struct {
	grpc.ServerStream
}

func (x *cardServiceGetCardsServer) Send(m *Card) error {
	return x.ServerStream.SendMsg(m)
}

func _CardService_GetPlayers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardServiceServer).GetPlayers(m, &cardServiceGetPlayersServer{stream})
}

type CardService_GetPlayersServer interface {
	Send(*Player) error
	grpc.ServerStream
}

type cardServiceGetPlayersServer struct {
	grpc.ServerStream
}

func (x *cardServiceGetPlayersServer) Send(m *Player) error {
	return x.ServerStream.SendMsg(m)
}

func _CardService_AddPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CardService/AddPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddPlayer(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CardService/AddSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddSeason(ctx, req.(*SeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CardService/AddCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCard(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlayer",
			Handler:    _CardService_AddPlayer_Handler,
		},
		{
			MethodName: "AddSeason",
			Handler:    _CardService_AddSeason_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _CardService_AddCard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCards",
			Handler:       _CardService_GetCards_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPlayers",
			Handler:       _CardService_GetPlayers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cards.proto",
}
